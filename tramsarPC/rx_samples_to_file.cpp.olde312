//
// Copyright 2010-2011,2014 Ettus Research LLC
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#include <uhd/usrp/multi_usrp.hpp>
#include <uhd/types/tune_request.hpp>
#include <uhd/utils/thread_priority.hpp>
#include <uhd/utils/safe_main.hpp>
#include <uhd/usrp/multi_usrp.hpp>
#include <uhd/exception.hpp>
#include <uhd/transport/udp_simple.hpp>
#include <boost/program_options.hpp>
#include <boost/format.hpp>
#include <boost/thread.hpp>
#include <boost/thread/thread.hpp>
#include <boost/program_options.hpp>
#include <boost/math/special_functions/round.hpp>
#include <boost/format.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <iostream>
#include <fstream>
#include <csignal>
#include <complex>
#include <curses.h>

#include <cairo.h>
#include <gtk-2.0/gdk/gdkkeysyms.h>
#include <gtk-2.0/gtk/gtk.h>

namespace po = boost::program_options;

static bool stop_signal_called = false;
static bool start_signal_called = false;
void sig_int_handler(int){stop_signal_called = true;}

//////////
void send_from_file(
    uhd::usrp::multi_usrp::sptr usrp,
    const std::string &cpu_format,
    const std::string &wire_format,
    const std::string &file,
    size_t samps_per_buff, //spb_tx
    unsigned long long total_num_samps//added
){

    //create a transmit streamer
    uhd::stream_args_t stream_args(cpu_format, wire_format);
    uhd::tx_streamer::sptr tx_stream = usrp->get_tx_stream(stream_args);

    uhd::tx_metadata_t md;
    md.start_of_burst = false;
    md.end_of_burst = false;
    std::vector<float> buff(samps_per_buff);//buff size is determined by samps_per_buff.
    std::ifstream infile(file.c_str(), std::ifstream::binary);

    //loop until the entire file has been read

    infile.read((char*)&buff.front(), buff.size()*sizeof(short));//buff.size() determines how much to read from file
    size_t num_tx_samps = size_t(infile.gcount()/sizeof(short));//the total number of samples to send determined by how much read from file
    md.end_of_burst = infile.eof();

    uint64_t num_acc_samps = 0;
    while(not stop_signal_called){ 
    	if (total_num_samps > 0 and num_acc_samps >= total_num_samps){
    		num_acc_samps = 0;  
    		infile.seekg(0,infile.beg);
			//send a mini EOB packet 
			md.end_of_burst = true;
			tx_stream->send("", 0, md); 
    	}  
    	md.start_of_burst = false;
    	infile.seekg(0,infile.cur);
        num_acc_samps += tx_stream->send(&buff.front(), num_tx_samps, md);
        infile.read((char*)&buff.front(), buff.size()*sizeof(float));//buff.size() determines how much to read from file

    }
    infile.close();

    /*
    //send data until the signal handler gets called
    //or if we accumulate the number of samples specified (unless it's 0)
    uint64_t num_acc_samps = 0;
    while(true){

        if (stop_signal_called) break;
        if (total_num_samps > 0 and num_acc_samps >= total_num_samps) break;

        //fill the buffer with the waveform
        for (size_t n = 0; n < buff.size(); n++){
            buff[n] = wave_table(index += step);
        }

        //send the entire contents of the buffer
        num_acc_samps += tx_stream->send(
            buffs, buff.size(), md
        );

        md.start_of_burst = false;
        md.has_time_spec = false;
    }

    //send a mini EOB packet
    md.end_of_burst = true;
    tx_stream->send("", 0, md);
    */
}

template<typename samp_type> void recv_to_file(
    uhd::usrp::multi_usrp::sptr usrp,
    const std::string &cpu_format,
    const std::string &wire_format,
    const std::string &file,
    size_t samps_per_buff,
    unsigned long long num_requested_samples,
    double time_requested = 0.0,
    bool bw_summary = false,
    bool stats = false,
    bool null = false,
    bool enable_size_map = false,
    bool continue_on_bad_packet = false,
    double tx_freq = 0e9,
    double freq = 0e9,
    std::string addr_udp = '192.168.2.2',
    std::string port_udp = '7125'
){
    unsigned long long num_total_samps = 0;
    uhd::tune_request_t tune_request;
    uhd::tune_request_t tune_request_rx;
    //create a receive streamer
    uhd::stream_args_t stream_args(cpu_format,wire_format);
    uhd::rx_streamer::sptr rx_stream = usrp->get_rx_stream(stream_args);

    uhd::rx_metadata_t md;
    std::vector<samp_type> buff(samps_per_buff);
    std::ofstream outfile;
    FILE* pFile;
    if (not null)
        outfile.open(file.c_str(), std::ofstream::binary);
        pFile = fopen("file.binary", "wb");
    bool overflow_message = true;

    //setup streaming
    uhd::stream_cmd_t stream_cmd((num_requested_samples == 0)?
        uhd::stream_cmd_t::STREAM_MODE_START_CONTINUOUS:
        uhd::stream_cmd_t::STREAM_MODE_NUM_SAMPS_AND_DONE
    );
    stream_cmd.num_samps = size_t(num_requested_samples);
    stream_cmd.stream_now = true;
    stream_cmd.time_spec = uhd::time_spec_t();
    //rx_stream->issue_stream_cmd(stream_cmd);

    boost::system_time start = boost::get_system_time();
    unsigned long long ticks_requested = (long)(time_requested * (double)boost::posix_time::time_duration::ticks_per_second());
    boost::posix_time::time_duration ticks_diff;
    boost::system_time last_update = start;
    unsigned long long last_update_samps = 0;

    typedef std::map<size_t,size_t> SizeMap;
    SizeMap mapSizes;
    int num_position = 0;
    char response;
    int i = 1; 
    int i_freq = 0;
    while(true){
        start_signal_called = true;     
        if (stop_signal_called){
            //usrp->set_user_register(0,1,2);//addr= user_reg_0, data=1, mboard = 1 (ALL_MBOARDS)
            break;
        }
        if (start_signal_called){
            std::cout << boost::format("start_signal_called is triggered") << std::endl;
            //setup streaming
            uhd::stream_cmd_t stream_cmd((num_requested_samples == 0)?
                uhd::stream_cmd_t::STREAM_MODE_START_CONTINUOUS:
                uhd::stream_cmd_t::STREAM_MODE_NUM_SAMPS_AND_DONE
            );
            stream_cmd.num_samps = size_t(num_requested_samples);
            stream_cmd.stream_now = true;
            stream_cmd.time_spec = uhd::time_spec_t();
            rx_stream->issue_stream_cmd(stream_cmd);

            boost::system_time start = boost::get_system_time();
            ticks_requested = (long)(time_requested * (double)boost::posix_time::time_duration::ticks_per_second());
            boost::posix_time::time_duration ticks_diff;
            boost::system_time last_update = start;
            last_update_samps = 0; //Write from the begining of the rec file. 
            SizeMap mapSizes;

            uhd::transport::udp_simple::sptr udp_xport = uhd::transport::udp_simple::make_connected(addr_udp, port_udp);//udp
            while(not stop_signal_called and (num_requested_samples > num_total_samps or num_requested_samples == 0)) {
                boost::system_time now = boost::get_system_time();
                std::cout << boost::format("Before rx_stream")<< std::endl;
                size_t num_rx_samps = rx_stream->recv(&buff.front(), buff.size(), md, 3.0, enable_size_map);
                std::cout << boost::format("After rx_stream. num_requested_samples :%d \n num_total_samps: %d \n num_rx_samps: %d") %num_requested_samples %num_total_samps %num_rx_samps<< std::endl;
                
                if (md.error_code == uhd::rx_metadata_t::ERROR_CODE_TIMEOUT) {
                    std::cout << boost::format("Timeout while streaming") << std::endl;
                    break;
                }
                if (md.error_code == uhd::rx_metadata_t::ERROR_CODE_OVERFLOW){
                    if (overflow_message) {
                        overflow_message = false;
                        std::cerr << boost::format(
                            "Got an overflow indication. Please consider the following:\n"
                            "  Your write medium must sustain a rate of %fMB/s.\n"
                            "  Dropped samples will not be written to the file.\n"
                            "  Please modify this example for your purposes.\n"
                            "  This message will not appear again.\n"
                        ) % (usrp->get_rx_rate()*sizeof(samp_type)/1e6);
                    }
                    continue;
                }
                if (md.error_code != uhd::rx_metadata_t::ERROR_CODE_NONE){
                    std::string error = str(boost::format("Receiver error: %s") % md.strerror());
                    if (continue_on_bad_packet){
                        std::cerr << error << std::endl;
                        continue;
                    }
                    else
                        throw std::runtime_error(error);
                       
                }

                if (enable_size_map) {
                    SizeMap::iterator it = mapSizes.find(num_rx_samps);
                    if (it == mapSizes.end())
                        mapSizes[num_rx_samps] = 0;
                    mapSizes[num_rx_samps] += 1;
                }

                num_total_samps += num_rx_samps;
                if (outfile.is_open())
                    //outfile.write((const char*)&buff.front(), num_rx_samps*sizeof(samp_type));//Chen: write to hard drive
                    //send complex single precision floating point samples over udp
                    udp_xport->send(boost::asio::buffer(buff, num_rx_samps*sizeof(buff.front())));
                //if (pFile){
                //fwrite((const char*)&buff.front(), sizeof(samp_type), num_rx_samps/2, pFile);
                //std::cerr << boost::format("  fwrite works.\n");
                //}

                if (bw_summary) {
                    last_update_samps += num_rx_samps;
                    boost::posix_time::time_duration update_diff = now - last_update;
                    if (update_diff.ticks() > boost::posix_time::time_duration::ticks_per_second()) {
                        double t = (double)update_diff.ticks() / (double)boost::posix_time::time_duration::ticks_per_second();
                        double r = (double)last_update_samps / t;
                        std::cout << boost::format("\t%f Msps") % (r/1e6) << std::endl;
                        last_update_samps = 0;
                        last_update = now;
                    }
                }

                ticks_diff = now - start;
                if (ticks_requested > 0){
                    if ((unsigned long long)ticks_diff.ticks() > ticks_requested)
                        break;
                }
            }
            start_signal_called = false;
            num_total_samps = 0;
        }//for if
        std::cout << boost::format("Measurement %d is done\n") % i << std::endl;
    if (i_freq>=0)//frequency hopping
    {
        i_freq=0;
    }
        tune_request = uhd::tune_request_t(tx_freq+i_freq*56e6);
        tune_request_rx = uhd::tune_request_t(freq+i_freq*56e6);
        usrp->set_tx_freq(tune_request);
    usrp->set_rx_freq(tune_request_rx);//unconment this line if hopping freq
    std::cout << boost::format("Actual TX Freq: %f MHz...") % (usrp->get_tx_freq()/1e6) << std::endl << std::endl;        
    std::cout << boost::format("Actual RX Freq: %f MHz...") % (usrp->get_rx_freq()/1e6) << std::endl << std::endl;
        ++i; 
        ++i_freq;
    }
    
    
            
    stream_cmd.stream_mode = uhd::stream_cmd_t::STREAM_MODE_STOP_CONTINUOUS;
    rx_stream->issue_stream_cmd(stream_cmd);

    if (outfile.is_open())
        outfile.close();
        fclose(pFile);

    if (stats) {
        std::cout << std::endl;

        double t = (double)ticks_diff.ticks() / (double)boost::posix_time::time_duration::ticks_per_second();
        std::cout << boost::format("Received %d samples in %f seconds") % num_total_samps % t << std::endl;
        double r = (double)num_total_samps / t;
        std::cout << boost::format("%f Msps") % (r/1e6) << std::endl;

        if (enable_size_map) {
            std::cout << std::endl;
            std::cout << "Packet size map (bytes: count)" << std::endl;
            for (SizeMap::iterator it = mapSizes.begin(); it != mapSizes.end(); it++)
                std::cout << it->first << ":\t" << it->second << std::endl;
        }
    }
}

typedef boost::function<uhd::sensor_value_t (const std::string&)> get_sensor_fn_t;

bool check_locked_sensor(std::vector<std::string> sensor_names, const char* sensor_name, get_sensor_fn_t get_sensor_fn, double setup_time){
    if (std::find(sensor_names.begin(), sensor_names.end(), sensor_name) == sensor_names.end())
        return false;

    boost::system_time start = boost::get_system_time();
    boost::system_time first_lock_time;

    std::cout << boost::format("Waiting for \"%s\": ") % sensor_name;
    std::cout.flush();

    while (true) {
        if ((not first_lock_time.is_not_a_date_time()) and
                (boost::get_system_time() > (first_lock_time + boost::posix_time::seconds(setup_time))))
        {
            std::cout << " locked." << std::endl;
            break;
        }
        if (get_sensor_fn(sensor_name).to_bool()){
            if (first_lock_time.is_not_a_date_time())
                first_lock_time = boost::get_system_time();
            std::cout << "+";
            std::cout.flush();
        }
        else {
            first_lock_time = boost::system_time(); //reset to 'not a date time'

            if (boost::get_system_time() > (start + boost::posix_time::seconds(setup_time))){
                std::cout << std::endl;
                throw std::runtime_error(str(boost::format("timed out waiting for consecutive locks on sensor \"%s\"") % sensor_name));
            }
            std::cout << "_";
            std::cout.flush();
        }
        boost::this_thread::sleep(boost::posix_time::milliseconds(100));
    }
    std::cout << std::endl;
    return true;
}

int UHD_SAFE_MAIN(int argc, char *argv[]){
    uhd::set_thread_priority_safe();

    //variables to be set by po
    std::string rx_channels, tx_channels, args, tx_args, file, tx_file, type, ant, subdev, tx_subdev, ref, wirefmt, addr_udp, port_udp;
    size_t total_num_samps, spb_tx, spb;
    double rate, tx_rate, freq, gain, bw, total_time, setup_time, delay, tx_freq, tx_gain, tx_bw;

    //setup the program options
    po::options_description desc("Allowed options");
    desc.add_options()
        ("help", "help message")
        ("args", po::value<std::string>(&args)->default_value(""), "multi uhd device address args")
        ("tx-args", po::value<std::string>(&tx_args)->default_value(""), "uhd transmit device address args")
        ("file", po::value<std::string>(&file)->default_value("usrp_samples.dat"), "name of the file to write binary samples to")
        ("tx_file", po::value<std::string>(&tx_file)->default_value("usrp_samples.dat"), "name of the file to read binary samples from for tx")
        ("type", po::value<std::string>(&type)->default_value("short"), "sample type: double, float, or short")
        ("nsamps", po::value<size_t>(&total_num_samps)->default_value(0), "total number of samples to receive")
        ("duration", po::value<double>(&total_time)->default_value(0), "total number of seconds to receive")
        ("time", po::value<double>(&total_time), "(DEPRECATED) will go away soon! Use --duration instead")
        ("spb", po::value<size_t>(&spb)->default_value(10000), "samples per buffer")
        ("spb_tx", po::value<size_t>(&spb_tx)->default_value(10000), "TX samples per buffer")
        ("rate", po::value<double>(&rate)->default_value(1e6), "rate of incoming samples")
        ("tx_rate", po::value<double>(&tx_rate)->default_value(1e6), "Transmit rate of incoming samples")
        ("freq", po::value<double>(&freq)->default_value(0.0), "RF center frequency in Hz")
        ("tx_freq", po::value<double>(&tx_freq), "Transmit RF center frequency in Hz")
        ("gain", po::value<double>(&gain), "gain for the RF chain")
        ("tx_gain", po::value<double>(&tx_gain), "Transmit gain for the RF chain")
        ("ant", po::value<std::string>(&ant), "antenna selection")
        ("subdev", po::value<std::string>(&subdev), "subdevice specification")
        ("tx-subdev", po::value<std::string>(&tx_subdev), "transmit subdevice specification")
        ("bw", po::value<double>(&bw), "analog frontend filter bandwidth in Hz")
        ("tx_bw", po::value<double>(&tx_bw), "Transmit analog frontend filter bandwidth in Hz")
        ("ref", po::value<std::string>(&ref)->default_value("internal"), "reference source (internal, external, mimo)")
        ("wirefmt", po::value<std::string>(&wirefmt)->default_value("sc16"), "wire format (sc8 or sc16)")
        ("setup", po::value<double>(&setup_time)->default_value(1.0), "seconds of setup time")
        ("progress", "periodically display short-term bandwidth")
        ("stats", "show average bandwidth on exit")
        ("sizemap", "track packet size and display breakdown on exit")
        ("null", "run without writing to file")
        ("continue", "don't abort on a bad packet")
        ("skip-lo", "skip checking LO lock status")
        ("int-n", "tune USRP with integer-N tuning")
        ("delay", po::value<double>(&delay)->default_value(0.0), "specify a delay between repeated transmission of file")
        ("repeat", "repeatedly transmit file")
        ("tx-channels", po::value<std::string>(&tx_channels)->default_value("0"), "which TX channel(s) to use (specify \"0\", \"1\", \"0,1\", etc)")
        ("rx-channels", po::value<std::string>(&rx_channels)->default_value("0"), "which RX channel(s) to use (specify \"0\", \"1\", \"0,1\", etc)")
        ("port_udp", po::value<std::string>(&port_udp)->default_value("7125"), "server udp port")
        ("addr_udp", po::value<std::string>(&addr_udp)->default_value("192.168.2.1"), "resolvable server address")
    ;
    po::variables_map vm;
    po::store(po::parse_command_line(argc, argv, desc), vm);
    po::notify(vm);

    //print the help message
    if (vm.count("help")) {
        std::cout << boost::format("UHD RX samples to file %s") % desc << std::endl;
        std::cout
            << std::endl
            << "This application streams data from a single channel of a USRP device to a file.\n"
            << std::endl;
        return ~0;
    }
    
    bool repeat = vm.count("repeat") > 0;
    bool bw_summary = vm.count("progress") > 0;
    bool stats = vm.count("stats") > 0;
    bool null = vm.count("null") > 0;
    bool enable_size_map = vm.count("sizemap") > 0;
    bool continue_on_bad_packet = vm.count("continue") > 0;

    if (enable_size_map)
        std::cout << "Packet size tracking enabled - will only recv one packet at a time!" << std::endl;

    //create a usrp device
    std::cout << std::endl;
    std::cout << boost::format("Creating the transmit usrp device with: %s...") % tx_args << std::endl;
    std::cout << boost::format("Creating the usrp device with: %s...") % args << std::endl;
    uhd::usrp::multi_usrp::sptr usrp = uhd::usrp::multi_usrp::make(args);

    //Lock mboard clocks
    usrp->set_clock_source(ref);
    //tx_usrp->set_clock_source(ref);
    usrp->set_master_clock_rate(40e6); //40e6 is fine. 32e6 56e6 64e6 fails. Need to change FPGA?
    //detect which channels to use
    std::vector<std::string> tx_channel_strings;
    std::vector<size_t> tx_channel_nums;
    boost::split(tx_channel_strings, tx_channels, boost::is_any_of("\"',"));
    for(size_t ch = 0; ch < tx_channel_strings.size(); ch++){
        size_t chan = boost::lexical_cast<int>(tx_channel_strings[ch]);
        if(chan >= usrp->get_tx_num_channels()){
            throw std::runtime_error("Invalid TX channel(s) specified.");
        }
        else tx_channel_nums.push_back(boost::lexical_cast<int>(tx_channel_strings[ch]));
    }
   std::vector<std::string> rx_channel_strings;
    std::vector<size_t> rx_channel_nums;
    boost::split(rx_channel_strings, rx_channels, boost::is_any_of("\"',"));
    for(size_t ch = 0; ch < rx_channel_strings.size(); ch++){
        size_t chan = boost::lexical_cast<int>(rx_channel_strings[ch]);
        if(chan >= usrp->get_rx_num_channels()){
            throw std::runtime_error("Invalid RX channel(s) specified.");
        }
        else rx_channel_nums.push_back(boost::lexical_cast<int>(rx_channel_strings[ch]));
    }

    //always select the subdevice first, the channel mapping affects the other settings
    if (vm.count("subdev")) usrp->set_rx_subdev_spec(subdev);
    //if (vm.count("tx-subdev")) tx_usrp->set_tx_subdev_spec(tx_subdev);
    std::cout << boost::format("Using RX Device: %s") % usrp->get_pp_string() << std::endl;
    //std::cout << boost::format("Using TX Device: %s") % tx_usrp->get_pp_string() << std::endl;
    



//////////////////////////////////////////
    //Transmit

    //set the sample rate
    if (not vm.count("tx_rate")){
        std::cerr << "Please specify the sample rate with --rate" << std::endl;
        return ~0;
    }
    std::cout << boost::format("Setting TX Rate: %f Msps...") % (tx_rate/1e6) << std::endl;
    usrp->set_tx_rate(tx_rate);
    std::cout << boost::format("Actual TX Rate: %f Msps...") % (usrp->get_tx_rate()/1e6) << std::endl << std::endl;

    //set the center frequency
    if (not vm.count("tx_freq")){
        std::cerr << "Please specify the center frequency with --tx_freq" << std::endl;
        return ~0;
    }
    std::cout << boost::format("Setting TX Freq: %f MHz...") % (tx_freq/1e6) << std::endl;
    uhd::tune_request_t tune_request;
    tune_request = uhd::tune_request_t(tx_freq);
    if(vm.count("int-n")) tune_request.args = uhd::device_addr_t("mode_n=integer");
    usrp->set_tx_freq(tune_request);
    std::cout << boost::format("Actual TX Freq: %f MHz...") % (usrp->get_tx_freq()/1e6) << std::endl << std::endl;
    
    //set the rf gain
    if (vm.count("tx_gain")){
        std::cout << boost::format("Setting TX Gain: %f dB...") % tx_gain << std::endl;
        usrp->set_tx_gain(tx_gain);
        std::cout << boost::format("Actual TX Gain: %f dB...") % usrp->get_tx_gain() << std::endl << std::endl;
    }

    //set the analog frontend filter bandwidth
    if (vm.count("tx_bw")){
        std::cout << boost::format("Setting TX Bandwidth: %f MHz...") % (tx_bw/1e6) << std::endl;
        usrp->set_tx_bandwidth(tx_bw);
        std::cout << boost::format("Actual TX Bandwidth: %f MHz...") % (usrp->get_tx_bandwidth()/1e6) << std::endl << std::endl;
    }

    //C: set the dc offset
    //usrp->set_tx_dc_offset(0, 0);
    usrp->set_rx_dc_offset(false, 0);

    /////////////////////////////////////
    //Transmit
    /////////////////////////////////////
    //send_from_file(tx_usrp, "fc32", wirefmt, tx_file, spb);
    //send from file
    /*int k;
    do{
    send_from_file(usrp, "fc32", wirefmt, tx_file, spb);
    if(repeat and delay != 0.0) boost::this_thread::sleep(boost::posix_time::milliseconds(delay));
    k=k+1;
    std::cout << k << std::endl;
    } while(repeat and not stop_signal_called and k!=50);
    */

    //start transmit worker thread
    boost::thread_group transmit_thread;
    //transmit_thread.create_thread(boost::bind(&send_from_file,usrp, "fc32", wirefmt, tx_file, spb_tx, total_num_samps));//e312 accpets fc32 if usrp_samples.dat is in numpy.float32 format. 
    transmit_thread.create_thread(boost::bind(&send_from_file,usrp, "sc16", wirefmt, tx_file, spb_tx, total_num_samps));//e312 can accept sc16 if usrp_samples.dat is in numpy.int16 format.
    // start trig_rec
    boost::thread_group trig_rec_thread;
    
    ///////////////////////////////////////////////
    //Receive
    //////////fz/////////////////////////////////////
    //set the sample rate
    if (rate <= 0.0){
        std::cerr << "Please specify a valid sample rate" << std::endl;
        return ~0;
    }
    std::cout << boost::format("Setting RX Rate: %f Msps...") % (rate/1e6) << std::endl;
    usrp->set_rx_rate(rate);
    std::cout << boost::format("Actual RX Rate: %f Msps...") % (usrp->get_rx_rate()/1e6) << std::endl << std::endl;

    //set the center frequency
    if (vm.count("freq")) { //with default of 0.0 this will always be true
        std::cout << boost::format("Setting RX Freq: %f MHz...") % (freq/1e6) << std::endl;
        uhd::tune_request_t tune_request(freq);
        if(vm.count("int-n")) tune_request.args = uhd::device_addr_t("mode_n=integer");
        usrp->set_rx_freq(tune_request);
        std::cout << boost::format("Actual RX Freq: %f MHz...") % (usrp->get_rx_freq()/1e6) << std::endl << std::endl;
    }

    //set the rf gain
    if (vm.count("gain")) {
        std::cout << boost::format("Setting RX Gain: %f dB...") % gain << std::endl;
        usrp->set_rx_gain(gain);
        std::cout << boost::format("Actual RX Gain: %f dB...") % usrp->get_rx_gain() << std::endl << std::endl;
    }

    //set the IF filter bandwidth
    if (vm.count("bw")) {
        std::cout << boost::format("Setting RX Bandwidth: %f MHz...") % (bw/1e6) << std::endl;
        usrp->set_rx_bandwidth(bw);
        std::cout << boost::format("Actual RX Bandwidth: %f MHz...") % (usrp->get_rx_bandwidth()/1e6) << std::endl << std::endl;
    }

    //set the antenna
    if (vm.count("ant")) usrp->set_rx_antenna(ant);

    boost::this_thread::sleep(boost::posix_time::seconds(setup_time)); //allow for some setup time

    //check Ref and LO Lock detect
    if (not vm.count("skip-lo")){
        check_locked_sensor(usrp->get_rx_sensor_names(0), "lo_locked", boost::bind(&uhd::usrp::multi_usrp::get_rx_sensor, usrp, _1, 0), setup_time);
        if (ref == "mimo")
            check_locked_sensor(usrp->get_mboard_sensor_names(0), "mimo_locked", boost::bind(&uhd::usrp::multi_usrp::get_mboard_sensor, usrp, _1, 0), setup_time);
        if (ref == "external")
            check_locked_sensor(usrp->get_mboard_sensor_names(0), "ref_locked", boost::bind(&uhd::usrp::multi_usrp::get_mboard_sensor, usrp, _1, 0), setup_time);
    }

    if (total_num_samps == 0){
        std::signal(SIGINT, &sig_int_handler);
        std::cout << "Press Ctrl + C to stop streaming..." << std::endl;
    }

    //set sigint if user wants to receive
    if(repeat){
        std::signal(SIGINT, &sig_int_handler);
        std::cout << "Press Ctrl + C to stop streaming..." << std::endl;
    }

    
#define recv_to_file_args(format) \
    (usrp, format, wirefmt, file, spb, total_num_samps, total_time, bw_summary, stats, null, enable_size_map, continue_on_bad_packet, tx_freq,freq, addr_udp, port_udp)
    while (not stop_signal_called) {
        //recv to file
        if (type == "double") recv_to_file<std::complex<double> >recv_to_file_args("fc64");
        else if (type == "float") recv_to_file<std::complex<float> >recv_to_file_args("fc32");
        else if (type == "short") recv_to_file<std::complex<short> >recv_to_file_args("sc16");
        else throw std::runtime_error("Unknown type " + type);
        //start_signal_called = false;
        break;
    }
    //finished
    std::cout << std::endl << "Done!" << std::endl << std::endl;
    //clean up transmit worker
    stop_signal_called = true;//There is another part of code in fpga to repeat the transmit waveform
    transmit_thread.join_all();
    return EXIT_SUCCESS;
}
