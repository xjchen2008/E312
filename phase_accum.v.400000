//
// Copyright 2015 Ettus Research
//
// Expects scaled radians fixed point input format of the form Q2.#,
// Example: WIDTH_IN=8 then input format: Q2.5 (sign bit, 2 integer bits, 5 fraction bits)
// Xingjian Chen 2018: This file generate the phase for a linear chirp. 
module phase_accum #(
  parameter REVERSE_ROTATION = 0, // Negate phase increment value
  parameter WIDTH_ACCUM = 32, // This may limit the accum upper bond which is the max bandwidth
  parameter WIDTH_IN = 32,
  parameter WIDTH_OUT = 32)
(
  input clk, input reset, input clear,
  input [WIDTH_IN-1:0] i_tdata, input [WIDTH_IN-1:0] chirp_rate, input i_tlast, input i_tvalid, output i_tready,
  output [WIDTH_OUT-1:0] o_tdata, output o_tlast, output o_tvalid, input o_tready,
  output chirp_strobe,
  output debug,
  input trigInPin
);

  reg signed [WIDTH_ACCUM-1:0] accum, accum_next, samplenum_inc, sum, sum_0, accum0;
  // Scaled radians. Restrict range from +1 to -1.
  wire signed [WIDTH_ACCUM-1:0] POS_ROLLOVER = 2**(WIDTH_ACCUM-3);//Scaled Radians phase format, phase = [-1,1], 16'b001_0000000000000=2^13 in signed binary and 1 in 2QN format.The range of the phase is corresponding to [-pi,pi] but it is normalized by pi in CORDIC core and becomes [-1,1]
  wire signed [WIDTH_ACCUM-1:0] NEG_ROLLOVER = -(2**(WIDTH_ACCUM-3));//$signed(16'b1001_1011_0111_1001);//-(2**(WIDTH_ACCUM-3));
  reg signed [WIDTH_ACCUM-1:0] chirprate;//26844;//53687
  wire [WIDTH_OUT-1:0] output_round_tdata;
  wire output_round_tvalid, output_round_tready, output_round_tlast;
  wire [WIDTH_ACCUM-1:0] accum_init, accum_init_0;
  
  //assign accum_init_0 =   {i_tdata >> 1};//-5000;// this is -i_tdata/2 doesn't works
  assign accum_init =   -200000;//-16940;//33880;//{accum_init_0[31:1], ~accum_init_0[0]};// //-5000;// this is -i_tdata/2 doesn't works
  reg [WIDTH_ACCUM-1:0] chirp_len_fixed = 400000;
  reg [WIDTH_ACCUM-1:0] chirprate_fixed = 1342;//158;//15846;//26844; The unit is Hz/sample chirprate = A*k where A is a scale fator 2^29 and k is digital chirp rate
  reg strobe;
  assign chirp_strobe = strobe;
  reg [2:0] debug;
  reg trigInPin_reg;
  
  // Phase accumulator, can rotate in either direction
  always @(posedge clk) begin
    /*if (reset | clear) begin
      accum						= accum_init; 
      accum_next 		= accum_init;
      samplenum_inc = 32'd1;//REVERSE_ROTATION ? -$signed(32'd1) : $signed(32'd1); // This determines up-chirp or down-chirp
      sum							= 0; 
		strobe						=	 0;
		debug 			= 3'b000;
    end else */
	 if (i_tready & i_tvalid) begin
      if (i_tlast) begin // 
        accum       			= accum_init;
        accum_next  	= accum_init;
        samplenum_inc= 32'd1;//REVERSE_ROTATION ? -$signed(32'd1) : $signed(32'd1); 
        sum         			= 0; // this is the initial phase
		  debug 			= 3'b001;
      end else begin
        if (sum >= POS_ROLLOVER) begin
          accum      		= accum_next; // preserve the previous accum_next into accum
          accum_next 	= accum_next + samplenum_inc; //freq updating or increasing
          sum        			= sum + chirprate_fixed * (accum_next + accum) - 2*POS_ROLLOVER;
			 debug 			= 3'b010;
        end else if (sum <= NEG_ROLLOVER) begin
          accum     			= accum_next; // preserve the previous accum_next into accum
          accum_next   = accum_next + samplenum_inc; //freq updating or increasing
          sum       			= sum + chirprate_fixed * (accum_next + accum) - 2*NEG_ROLLOVER;
			 debug 			= 3'b011;
        //end else if (accum == {i_tdata >> 1}) begin // This line determines Chirp length; accume add 1 in every loop until hit i_tdata/2 limit
        //end else if (accum >= 16940-1000 && accum <= 16940) begin//33880/2=7923 {chirp_len_fixed >> 1}) begin // This line determines Chirp length; accume add 1 in every loop until hit chirp_len_fixed/2 limit
        //end else if (accum == 5000) begin // This line determines Chirp length; accume add 1 in every loop until hit i_tdata/2 limit
        end else if (trigInPin == 0 && trigInPin_reg == 0) begin //detect trigInPin rising edge step 1
		    trigInPin_reg = 1;
		  end else if (trigInPin == 1 && trigInPin_reg == 1) begin //detect trigInPin rising edge step 2
		    trigInPin_reg = 0;			 
		  //end else if (accum >= 16940) begin
			 accum      		= accum_init;
          accum_next   = accum_init;
          sum        			= 0;
			 strobe					= 0;
			 debug 			= 3'b100;
//        end else if (accum < 16940) begin
			end else if (accum < 200000) begin
		  //end else begin
		    strobe					= 1;
          accum      		= accum_next; // preserve the previous accum_next into accum
          accum_next   = accum_next + samplenum_inc; //freq updating or increasing
          sum        			= sum + chirprate_fixed * (accum_next + accum);
			 debug 			= 3'b101;
        end
      end
    end
  end
      //assign o_tdata  = sum;
		assign o_tdata  = 32'h0001;
      assign o_tvalid = i_tvalid;
      assign o_tlast  = i_tlast;
      assign i_tready = o_tready;


/*
  generate
    // Bypass rounding if accumulator width is same as output width
    if (WIDTH_ACCUM == WIDTH_OUT) begin
      assign o_tdata  = sum;
      assign o_tvalid = i_tvalid;
      assign o_tlast  = i_tlast;
      assign i_tready = o_tready;
    end else begin
      axi_round #(
        .WIDTH_IN(WIDTH_ACCUM),
        .WIDTH_OUT(WIDTH_OUT))
      axi_round (
        .clk(clk), .reset(reset),
        .i_tdata(sum), .i_tlast(i_tlast), .i_tvalid(i_tvalid), .i_tready(i_tready),
        .o_tdata(o_tdata), .o_tlast(o_tlast), .o_tvalid(o_tvalid), .o_tready(o_tready));
    
    end
  endgenerate
*/
///////////////////////////////////
// Debug 
///////////////////////////////////
	/*
	reg [9:0] deb;
	wire [35:0] CONTROL;	
	
	chipscope_ila ila1 (
	 .CONTROL(CONTROL), // INOUT BUS [35:0]
	 .CLK(clk), // IN
	 //.DATA(deb), // IN BUS [7:0]
	 //.TRIG0({deb[4:0],accum}) // IN BUS [0:0] 
	 .TRIG0({deb[4:0],samplenum_inc}) // IN BUS [0:0]
	);

	chipscope_icon icon1 (
		 .CONTROL0(CONTROL) // INOUT BUS [35:0]
	);

	always @(posedge clk)
	begin
		deb[0] = strobe; //32
		deb[1] = chirp_strobe;//33
		deb[2] = debug[0];//34	
		deb[3] = debug[1];//35
		deb[4] = debug[2];//36
	end
	*/
endmodule

